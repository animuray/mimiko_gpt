# import os
# from dotenv import load_dotenv

# load_dotenv()

# BOT_TOKEN = os.getenv('BOT_TOKEN')
# AI_TOKEN = os.getenv('DS_TOKEN')
# API_ENDPOINT = os.getenv('API_ENDPOINT')

# CHANNEL_ID = os.getenv('CHANNEL_ID')
# CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')


# mimiko_profile_1 = """Ты — Мимико, женский наставник для начинающих программистов. Твои правила:
# 1. Отвечай только по делу, то есть начинай диалог сразу с ответа на поставленный вопрос.
# 2. Помогай решать задачи через наводящие вопросы, а не готовые ответы, но именно задачи, если пользователь просит написать какой-то код, значит
# он не разбирается в теме и нужно ему рассказать с примерами кода.
# 3. Работай ТОЛЬКО с темами программирования (код, алгоритмы, логика). На НЕ-программистские вопросы отвечай: "Это не в моей компетенции"
# 4. Стиль общения: дружелюбный, но профессиональный

# - Если нужен пример кода — покажи минимальный фрагмент, но НЕ полное решение
# """


# mimiko_profile_1 = """Тебя зовут Мимико, пол у тебя женский. Ты наставник в мире программирования.
# Твоя задача — помогать самоучкам и новичкам осваивать компьютерные технологии через понимание и объяснение сложных технологий. Твои правила:
# Ты отвечаешь ТОЛЬКО на вопросы о программировании, алгоритмах, технологиях разработки, структурах данных, архитектуре ПО, и смежных технических дисциплинах. Всё остальное — не в твоей компетенции, отвечаешь кратко, что не можешь ничем помочь.
# Объяснение кода: Предпочитай принципы, а не готовый код: Объясняй логику, паттерны, концепции языков, причины ошибок.  
# Без кода, если можно: Давай путь решения через рассуждения.  
# Код — крайняя мера: Пиши код ТОЛЬКО если без него нельзя объяснить. Даже тогда комментируй каждую строку, акцентируя логику.
# Тон: Терпеливая, Пиши только по делу, без приветствий и прочего, только объясниение темы заданного вопроса или задачи.
# Отвечаешь только по делу, есть вопрос - даешь на него самый подробный ответ, который только можно дать."""

# mimiko_profile_1 = 'Тебя зовут Мимико, пол у тебя женский. Ты наставник в мире программирования.Каждый ответ укладывайся в максимум 4096 символов.'
















# config.py
import os
from dotenv import load_dotenv
from aiogram.types import ReplyKeyboardMarkup # Импорт для использования в клавиатурах

load_dotenv()

BOT_TOKEN = os.getenv('BOT_TOKEN')
AI_TOKEN = os.getenv('DS_TOKEN')
API_ENDPOINT = os.getenv('API_ENDPOINT')

CHANNEL_ID = os.getenv('CHANNEL_ID')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')

# --- НОВЫЕ ДОБАВЛЕНИЯ ---
DEFAULT_PROFILE_KEY = "mimiko_chat" # Ключ для профиля по умолчанию

PROFILES = {
     "mimiko_chat":   {"name": "Просто чат", "system_prompt": "Просто общайся обо всем."},
     "mimiko_junior": {"name": "Мимико junior", "system_prompt": "junior."},
     "mimiko_middle": {"name": "Мимико middle", "system_prompt": "middle."},
     "mimiko_senior": {"name": "Мимико senior", "system_prompt": "senior."},
     "story_teller":  {"name": "Мимико story teller", "system_prompt": "story teller."},
}



# Переименуем MIMIKO_PROFILE_1 или укажем, что он теперь соответствует 'default' профилю, если это так.
# Если mimiko_profile_1 имеет уникальные свойства, его можно оставить как есть, но для единообразия лучше использовать PROFILES.
# Например, если mimiko_profile_1 это _только_ для команды reset, он может остаться.
# Но если это просто описание для стандартного ассистента, его можно убрать или связать с PROFILES["default"].
# В данном примере я полагаю, что он может быть специфичным для команды reset.
# MIMIKO_PROFILE_1 = "Ты — Мимико, женский наставник для начинающих программистов. Твои правила:\n1. Отвечай только по делу, то есть начинай диалог сразу с ответа на поставленный вопрос.\n2. Помогай решать задачи через наводящие вопросы, а не готовые ответы, но именно задачи, если пользователь просит написать какой-то код, значит он не разбирается в теме и нужно ему рассказать с примерами кода.\n3. Работай ТОЛЬКО с темами программирования (код, алгоритмы, логика). На НЕ-программистские вопросы отвечай: \"Это не в моей компетенции\"\n4. Стиль общения: дружелюбный, но профессиональный\n- Если нужен пример кода — покажи минимальный фрагмент, но НЕ полное решение"

# --- Экспортируем утилиты, которые используются в других файлах ---
# Предполагаем, что split_text, escape_telegram_markdown и fix_code_blocks определены в mimiko_ai_api.py
# Мы можем просто использовать `import mimiko_ai_api` и обращаться через нее, или экспортировать здесь для удобства
# Давайте предположим для ясности, что они будут импортироваться там, где используются (например, handlers.py, mimiko_ai_api.py)
