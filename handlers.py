# handlers.py
import random
import string
from datetime import datetime
from aiogram import types, Router, F, Bot
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import config
import keyboards
from database import Database
from ai_api import query_gemini_api
from utils import escape_markdown, split_messages

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
router = Router()
db = Database('db.db')

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π (FSM) ---
class Promo(StatesGroup):
    waiting_for_code = State()

class AdminPromo(StatesGroup):
    waiting_for_name = State()
    waiting_for_duration = State()
    waiting_for_quantity = State()

# --- üîΩ –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø üîΩ ---
class AdminGrantPremium(StatesGroup):
    waiting_for_user_id = State()
    waiting_for_duration = State()
# --- üîº –ö–û–ù–ï–¶ –ù–û–í–´–• –°–û–°–¢–û–Ø–ù–ò–ô üîº ---


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
def generate_random_code_part(length=8):
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))

async def check_subscription(user_id: int, bot: Bot) -> bool:
    try:
        member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception:
        return False

# ----- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –ò –ö–ù–û–ü–û–ö –û–°–ù–û–í–ù–û–ô –ö–õ–ê–í–ò–ê–¢–£–†–´ -----

@router.message(CommandStart())
async def cmd_start(message: types.Message, bot: Bot):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    db.add_user(message.from_user.id, message.from_user.username)
    if await check_subscription(message.from_user.id, bot):
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–Ø –ú–∏–º–∏–∫–æ, —Ç–≤–æ–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboards.main_keyboard)
    else:
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª. –≠—Ç–æ –∑–∞–π–º–µ—Ç –≤—Å–µ–≥–æ —Å–µ–∫—É–Ω–¥—É!", reply_markup=keyboards.subscribe_keyboard)

@router.message(Command("reset"))
@router.message(F.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥")
async def cmd_reset(message: types.Message):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_id = message.from_user.id
    current_profile_key = db.get_current_profile_key(user_id)
    db.reset_chat_history(user_id, current_profile_key)
    profile_name = config.PROFILES[current_profile_key]['name']
    await message.answer(f"‚ôªÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–æ–ª–∏ '{profile_name}' —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!")




# @router.message(Command("limits"))
# async def cmd_lim(message: types.Message):
#     with open('text_ai.txt', 'r', encoding='utf-8') as f:
#         response = f.read()  # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å —Ñ–∞–π–ª –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É

#     # –†–∞–∑–¥–µ–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏
#     for part in split_messages(response):
#         await message.answer(
#             text=part,
#             parse_mode="MarkdownV2"
#         )



@router.message(Command("role"))
@router.message(F.text == "üé≠ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å")
async def cmd_role(message: types.Message):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_id = message.from_user.id
    has_premium = db.check_premium_access(user_id)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, –≤ –∫–∞–∫–æ–π —Ä–æ–ª–∏ –º–Ω–µ –æ–±—â–∞—Ç—å—Å—è —Å –≤–∞–º–∏:", reply_markup=keyboards.get_roles_keyboard(has_premium))

@router.message(F.text == "üì± –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: types.Message):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_id = message.from_user.id
    user_info = db.get_user_info(user_id)
    if not user_info:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
        return
    profile_key = user_info[3]
    profile_name = config.PROFILES.get(profile_key, {}).get('name', "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è")
    status = "‚ÑπÔ∏è –ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø"
    if db.check_premium_access(user_id):
        sub_end_date_str = user_info[4]
        try:
            sub_end_date = datetime.strptime(sub_end_date_str, "%Y-%m-%d %H:%M:%S")
            status = f"üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {sub_end_date.strftime('%d.%m.%Y %H:%M:%S')}"
        except (ValueError, TypeError):
            status = "üíé –ü—Ä–µ–º–∏—É–º –∞–∫—Ç–∏–≤–µ–Ω (–æ—à–∏–±–∫–∞ –¥–∞—Ç—ã)"
    text = (f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n<b>ID:</b> <code>{user_info[0]}</code>\n<b>–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å:</b> {profile_name}\n<b>–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç—É–ø–∞:</b> {status}\n\n–î–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üé≠ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å¬ª.")
    await message.answer(text, parse_mode='HTML')

@router.message(F.text == 'üíé –¢–∞—Ä–∏—Ñ—ã')
async def show_tariffs(message: types.Message):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    text = ("üíé <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã</b> üíé\n\n<b>–ë–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø (–±–µ—Å–ø–ª–∞—Ç–Ω–æ):</b>\n- –î–æ—Å—Ç—É–ø –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Ä–æ–ª—è–º (–û–±—ã—á–Ω—ã–π —á–∞—Ç, –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç).\n- –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª.\n\n<b>–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø:</b>\n- –î–æ—Å—Ç—É–ø –∫–æ –í–°–ï–ú —Ä–æ–ª—è–º, –≤–∫–ª—é—á–∞—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ (–î–æ–∫—Ç–æ—Ä, –¢—Ä–æ–ª–ª—å –∏ –¥—Ä—É–≥–∏–µ).\n- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.\n\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–º (–∫–Ω–æ–ø–∫–∞ ¬´üéÅ –ü—Ä–æ–º–æ–∫–æ–¥¬ª) –∏–ª–∏ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
    await message.answer(text, parse_mode='HTML')

@router.message(F.text == '‚ùì F.A.Q.')
async def show_faq(message: types.Message):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    text = ("<b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n<b>–í: –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å (–ø–µ—Ä—Å–æ–Ω—É) –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞?</b>\n–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É ¬´üé≠ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å¬ª.\n\n<b>–í: –ë–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –∏–ª–∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω–æ. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?</b>\n–û: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /reset –∏–ª–∏ –∫–Ω–æ–ø–∫—É ¬´üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n\n<b>–í: –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø?</b>\n–û: –≠—Ç–æ –¥–æ—Å—Ç—É–ø –∫ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º –∏ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ä–æ–ª—è–º. –ù–∞–∂–º–∏—Ç–µ ¬´üíé –¢–∞—Ä–∏—Ñ—ã¬ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π.")
    await message.answer(text, parse_mode='HTML')

# --- üîΩ –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–ù–û–ü–ö–ò '–ü–û–î–î–ï–†–ñ–ê–¢–¨' üîΩ ---
@router.message(F.text == 'üíñ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å')
async def show_donation_info(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥–æ–Ω–∞—Ç–µ –∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π."""
    await message.answer(
        text=config.DONATION_CONFIG['text'],
        reply_markup=keyboards.get_donate_keyboard()
    )
# --- üîº –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê üîº ---


# ----- –°–ï–ö–¶–ò–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ò–†–û–í–ê–ù–ò–Ø -----

@router.message(Command("admin"))
async def cmd_admin(message: types.Message):
    if message.from_user.id not in config.ADMIN_IDS:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=keyboards.admin_keyboard)

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.callback_query(F.data == "admin_create_promo")
async def start_promo_creation(callback: types.CallbackQuery, state: FSMContext):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if callback.from_user.id not in config.ADMIN_IDS: return await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
    await callback.message.edit_text("<b>–®–∞–≥ 1/3:</b> –í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...", parse_mode='HTML')
    await state.set_state(AdminPromo.waiting_for_name)
    await callback.answer()
@router.message(AdminPromo.waiting_for_name)
async def process_promo_name(message: types.Message, state: FSMContext):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await state.update_data(name=message.text.upper().strip())
    await message.answer("<b>–®–∞–≥ 2/3:</b> ... –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ –¥–Ω—è—Ö...", parse_mode='HTML')
    await state.set_state(AdminPromo.waiting_for_duration)
@router.message(AdminPromo.waiting_for_duration)
async def process_promo_duration(message: types.Message, state: FSMContext):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not message.text.isdigit() or int(message.text) <= 0: return await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    await state.update_data(duration=int(message.text))
    await message.answer("<b>–®–∞–≥ 3/3:</b> ... —Å–∫–æ–ª—å–∫–æ —Ç–∞–∫–∏—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –Ω—É–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å...", parse_mode='HTML')
    await state.set_state(AdminPromo.waiting_for_quantity)
@router.message(AdminPromo.waiting_for_quantity)
async def process_promo_quantity(message: types.Message, state: FSMContext):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if not message.text.isdigit() or int(message.text) <= 0: return await message.answer("–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
    user_data = await state.get_data()
    prefix, duration, quantity = user_data['name'], user_data['duration'], int(message.text)
    await state.clear()
    await message.answer(f"–ù–∞—á–∏–Ω–∞—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é {quantity} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤...")
    generated_codes = [f"{prefix}-{generate_random_code_part()}" for _ in range(quantity)]
    db.add_promo_codes_batch(generated_codes, duration, quantity)
    codes_text = "\n".join(generated_codes)
    final_message = f"‚úÖ <b>–ì–æ—Ç–æ–≤–æ!</b>\n\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {quantity} –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ —Å–æ —Å—Ä–æ–∫–æ–º –¥–µ–π—Å—Ç–≤–∏—è {duration} –¥–Ω.:\n\n<code>{codes_text}</code>"
    if len(final_message) > 4096: await message.answer("–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ–¥–æ–≤. –û–Ω–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.")
    else: await message.answer(final_message, parse_mode='HTML')

# --- üîΩ –ù–û–í–ê–Ø –°–ï–ö–¶–ò–Ø: –í–´–î–ê–ß–ê –ü–†–ï–ú–ò–£–ú–ê –ü–û ID üîΩ ---
@router.callback_query(F.data == "admin_grant_premium")
async def start_premium_grant(callback: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä—É—á–Ω–æ–π –≤—ã–¥–∞—á–∏ –ø—Ä–µ–º–∏—É–º–∞."""
    if callback.from_user.id not in config.ADMIN_IDS:
        return await callback.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤.", show_alert=True)
    
    await callback.message.edit_text("<b>–®–∞–≥ 1/2:</b> –í–≤–µ–¥–∏—Ç–µ User ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –≤—ã–¥–∞—Ç—å –ø—Ä–µ–º–∏—É–º.", parse_mode='HTML')
    await state.set_state(AdminGrantPremium.waiting_for_user_id)
    await callback.answer()

@router.message(AdminGrantPremium.waiting_for_user_id)
async def process_grant_user_id(message: types.Message, state: FSMContext):
    """–®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ User ID."""
    if not message.text.isdigit():
        await message.answer("–û—à–∏–±–∫–∞: User ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(user_id=int(message.text))
    await message.answer("<b>–®–∞–≥ 2/2:</b> –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–µ–º–∏—É–º–∞ –≤ –¥–Ω—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, `30`).", parse_mode='HTML')
    await state.set_state(AdminGrantPremium.waiting_for_duration)

@router.message(AdminGrantPremium.waiting_for_duration)
async def process_grant_duration(message: types.Message, state: FSMContext):
    """–®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–æ–∫–∞ –∏ –≤—ã–¥–∞—á–∞ –ø—Ä–µ–º–∏—É–º–∞."""
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–û—à–∏–±–∫–∞: –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
        
    user_data = await state.get_data()
    user_id = user_data['user_id']
    duration_days = int(message.text)
    
    await state.clear()
    
    success, msg = db.grant_premium_to_user(user_id, duration_days)
    
    await message.answer(msg) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
# --- üîº –ö–û–ù–ï–¶ –ù–û–í–û–ô –°–ï–ö–¶–ò–ò üîº ---


# ----- –°–ï–ö–¶–ò–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò –ü–†–û–ú–û–ö–û–î–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú -----
@router.message(F.text == 'üéÅ –ü—Ä–æ–º–æ–∫–æ–¥')
async def ask_for_promo(message: types.Message, state: FSMContext):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    await state.set_state(Promo.waiting_for_code)
@router.message(Promo.waiting_for_code)
async def process_promo(message: types.Message, state: FSMContext):
    #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    code = message.text.strip()
    success, msg = db.activate_promo_code(message.from_user.id, code)
    if success: await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! {msg}")
    else: await message.answer(f"‚ùå –û—à–∏–±–∫–∞! {msg}")
    await state.clear()


# ----- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í -----
@router.callback_query(F.data == "check_subscription")
async def callback_check_subscription(callback: types.CallbackQuery, bot: Bot):
     #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if await check_subscription(callback.from_user.id, bot):
        await callback.message.delete()
        await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        await bot.send_message(callback.from_user.id, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏. –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—â–µ–Ω–∏–µ.", reply_markup=keyboards.main_keyboard)
    else:
        await callback.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
@router.callback_query(F.data.startswith("select_profile:"))
async def callback_select_profile(callback: types.CallbackQuery):
     #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_id = callback.from_user.id
    profile_key = callback.data.split(":")[1]
    profile = config.PROFILES.get(profile_key)
    if not profile: return await callback.answer("–¢–∞–∫–æ–π —Ä–æ–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
    if profile['is_premium'] and not db.check_premium_access(user_id): return await callback.answer("üîí –≠—Ç–∞ —Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–µ.", show_alert=True)
    db.update_user_profile(user_id, profile_key)
    await callback.answer()
    await callback.message.edit_text(f"‚úÖ –†–æ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: <b>{profile['name']}</b>\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –≤ —ç—Ç–æ–π —Ä–æ–ª–∏, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ /reset", parse_mode='HTML')


# ----- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–î–ò–ê–õ–û–ì –° –ò–ò) -----
@router.message(F.text)
async def handle_text_message(message: types.Message, bot: Bot):
     #... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_id = message.from_user.id
    if not await check_subscription(user_id, bot):
        return await message.answer("–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.", reply_markup=keyboards.subscribe_keyboard)
    await bot.send_chat_action(chat_id=user_id, action="typing")
    current_profile_key = db.get_current_profile_key(user_id)
    profile_settings = config.PROFILES[current_profile_key]
    system_prompt = {"role": "system", "content": profile_settings["prompt"]}
    history = db.get_chat_history(user_id, current_profile_key)
    messages_to_api = [system_prompt] + history + [{"role": "user", "content": message.text}]
    response_text = await query_gemini_api(messages_to_api)
    history.append({"role": "user", "content": message.text})
    history.append({"role": "assistant", "content": response_text})
    db.save_chat_history(user_id, current_profile_key, history)

 
    # if current_profile_key == 'MIMIKO_PROGRAMMER':
    #     pass
    
    # else:
    #     pass
    
    # if len(response_text) > 4096:
    #     parts = split_text(response_text)
    #     for part in parts: await message.answer(escape_markdown(part), parse_mode="MarkdownV2")
    # else:
    #     try: await message.answer(escape_markdown(response_text), parse_mode="MarkdownV2")
    #     except Exception: await message.answer(response_text)

    for part in split_messages(response_text):
            await message.answer(
            text=part,
            parse_mode="MarkdownV2"
        )
