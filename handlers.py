# from aiogram import types, Router
# from aiogram.filters import Command
# from main import bot
# from database import Database
# import keyboards
# from datetime import datetime
# import config
# import mimiko_ai_api
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# db = Database('db.db')

# handler_router = Router()


# async def check_subscription(user_id: int, bot) -> bool:
#     try:
#         member = await bot.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
#         return member.status in ['member', 'administrator', 'creator']
#     except Exception:
#         return False
    

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
# @handler_router.message(Command("start"))
# async def cmd_start(message: types.Message):
#     db.add_user(message.from_user.id, message.from_user.username)
#     db.get_user_context(message.from_user.id)

#     if await check_subscription(message.from_user.id, bot):
#         await bot.send_chat_action(message.chat.id, 'typing')
#         await message.answer('hello', reply_markup=keyboards.keyboard)

#     else:
#         keyboard = InlineKeyboardMarkup(inline_keyboard=[
#             [InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME}")],
#             [InlineKeyboardButton(text="–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
#         ])
#         await message.answer(
#             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:",
#             reply_markup=keyboard
#         )

# async def check_subscription_callback(callback: types.CallbackQuery, bot):
#     if await check_subscription(callback.from_user.id, bot):
#         await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")
#         # await message.answer_photo(photo=photo_links.start_photo, caption=f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.username}</b> ‚ú®\
#         # \n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ <a href="https://t.me/testykassaaa_bot">Mimiko_Shop</a>', parse_mode="HTML", reply_markup=keyboards.keyboard)
        
#     else:
#         await callback.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!", show_alert=True)

# handler_router.callback_query.register(check_subscription_callback, lambda c: c.data == "check_subscription")


# @handler_router.message(Command("reset"))
# # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π
# async def cmd_reset(message: types.Message):
#     default_context = [{"role": "system", "content": config.mimiko_profile_1}]
#     mimiko_ai_api.save_user_context(message.from_user.id, default_context)
#     await message.answer("‚ôªÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥.")


# @handler_router.message(Command("role"))
# async def cmd_role(message: types.Message):
#     text = db.get_user_context(764567038)
#     for t in text:
#         print(t)

# @handler_router.message(Command("limits"))
# async def cmd_limits(message: types.Message):
#     pass


# @handler_router.message(Command("gifts"))
# async def cmd_gifts(message: types.Message):
#     pass


# @handler_router.message(Command("settings"))
# async def cmd_settings(message: types.Message):
#     pass


# @handler_router.message(Command("help"))
# async def cmd_help(message: types.Message):
#     pass












# handlers.py
from aiogram import types, Router, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã
from aiogram.utils.keyboard import InlineKeyboardBuilder # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import config
import keyboards # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª keyboards –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ get_profile_keyboard
import mimiko_ai_api # –î–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ mimiko_ai_api.py
from database import Database

# --- –í–∞–∂–Ω–æ: –ò–º–ø–æ—Ä—Ç –±–æ—Ç–∞ –∏–∑ main.py ---
# –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –≤ main.py –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞.
# –ï—Å–ª–∏ –Ω–µ—Ç, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –µ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä –≤ —Ä–æ—É—Ç–µ—Ä—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç.
from main import bot 

db = Database('db.db') # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
handler_router = Router()

# --- –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å) ---
async def check_subscription(user_id: int, bot_instance: Bot) -> bool:
    try:
        member = await bot_instance.get_chat_member(chat_id=config.CHANNEL_ID, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except Exception as e:
        # logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc_info=True)
        return False

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start (–Ω–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) ---
@handler_router.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.add_user(user_id, username)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–æ–¥–ø–∏—Å–∫—É
    if await check_subscription(user_id, bot):
        await bot.send_chat_action(message.chat.id, 'typing')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å—Ç–∞—Ä—Ç–µ
        await message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: **{config.PROFILES[config.DEFAULT_PROFILE_KEY]["name"]}**.', 
            parse_mode="Markdown", 
            reply_markup=keyboards.keyboard # –ò—Å–ø–æ–ª—å–∑—É–µ–º Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ keyboards.py
        )
    else:
        # –ï—Å–ª–∏ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –ø–æ–¥–ø–∏—Å–∫–µ
        subscription_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=f"https://t.me/{config.CHANNEL_USERNAME}")],
            [InlineKeyboardButton(text="‚úîÔ∏è –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")]
        ])
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:",
            reply_markup=subscription_keyboard
        )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—É–∂–µ –µ—Å—Ç—å —É –≤–∞—Å, –ø—Ä–æ—Å—Ç–æ —É–±–µ–¥–∏–º—Å—è –≤ –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏) ---
@handler_router.callback_query(lambda c: c.data == "check_subscription")
async def check_subscription_callback(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    
    if await check_subscription(user_id, bot): # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞
        await callback_query.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª.")
        # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback_query.message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {callback_query.from_user.username}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n–í–∞—à —Ç–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: **{config.PROFILES[config.DEFAULT_PROFILE_KEY]["name"]}**.', 
            parse_mode="Markdown",
            reply_markup=keyboards.keyboard # –û—Å–Ω–æ–≤–Ω–∞—è Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback_query.answer("–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", show_alert=True)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /role ---
@handler_router.message(Command("role"))
async def cmd_role(message: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:",
        reply_markup=keyboards.get_profile_keyboard() # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ keyboards.py
    )

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–ª–±—ç–∫-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
@handler_router.callback_query(lambda c: c.data and c.data.startswith("select_profile:"))
async def process_profile_selection(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    callback_data = callback_query.data

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º callback_data: "select_profile:profle_key"
        prefix, profile_key = callback_data.split(":", 1)
        if prefix != "select_profile":
            return # –≠—Ç–æ –Ω–µ –Ω–∞—à –∫–æ–ª–±—ç–∫, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø—Ä–æ—Ñ–∏–ª—å
        if profile_key not in config.PROFILES:
            await callback_query.answer("–û—à–∏–±–∫–∞: –¢–∞–∫–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", show_alert=True)
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª—é—á —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_user_profile_key(user_id, profile_key)
        print(profile_key)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        selected_profile_name = config.PROFILES[profile_key]["name"]

        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫ –∑–∞–ø—Ä–æ—Å–∞ (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
        await callback_query.answer(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_profile_name}")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω
        await callback_query.message.edit_text(
            f"‚úÖ –í–∞—à —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å: **{selected_profile_name}**",
            parse_mode="Markdown"
        )
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, 
        # –Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ –≤—ã–≥–ª—è–¥–∏—Ç –±–æ–ª–µ–µ –Ω–∞–≥–ª—è–¥–Ω–æ
        await bot.send_message(user_id, f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {selected_profile_name}")

    except Exception as e:
        # logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è (user_id: {user_id}): {e}", exc_info=True)
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤—ã–±–æ—Ä–∞.", show_alert=True)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset (–æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º) ---
@handler_router.message(Command("reset"))
async def cmd_reset(message: types.Message):
    user_id = message.from_user.id
    current_context = db.get_user_info(user_id) # –±–µ—Ä–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å —é–∑–µ—Ä–∞ —Å –±–∞–∑—ã

    a = config.PROFILES[current_context[-1]]['system_prompt']
    print(a)
    # initial_context = [{"role": "system", "content": a}]
    # db.save_context(user_id, initial_context)

    # await message.answer("‚ôªÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –¥–æ –ø—Ä–æ—Ñ–∏–ª—è –ú–∏–º–∏–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å.")
    # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ "–ú–∏–º–∏–∫–æ":
    # await message.answer(f"‚ôªÔ∏è –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ –ø—Ä–æ—Ñ–∏–ª—è \"{config.PROFILES[config.DEFAULT_PROFILE_KEY]['name']}\". –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å.")


# --- Placeholder for other commands ---
@handler_router.message(Command("limits"))
async def cmd_limits(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∏–º–∏—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")


@handler_router.message(Command("gifts"))
async def cmd_gifts(message: types.Message):
    await message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /settings –º–æ–∂–µ—Ç –±—ã—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–æ–π –¥–ª—è –≤—ã–∑–æ–≤–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ.
# @handler_router.message(Command("settings"))
# async def cmd_settings(message: types.Message):
#     await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=some_settings_keyboard)

@handler_router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–ø—Ä–∞–≤–∫—É!\n\n"
        "‚ùì <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "- `/start`: –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º.\n"
        "- `/role`: –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞.\n"
        "- `/reset`: –°–±—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∫ –ø—Ä–æ—Ñ–∏–ª—é –ú–∏–º–∏–∫–æ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.\n"
        "- `/help`: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏.\n\n"
        "ü§ñ <b>–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å:</b>\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É `/role`. –ü–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å—Ç–∏–ª—å.\n\n"
        "üí¨ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:</b>\n"
        "–í—Å–µ –≤–∞—à–∏ –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–∞–º–∏ —Å—Ç–∏–ª–µ–º."
    )
    await message.answer(help_text, parse_mode="HTML")
