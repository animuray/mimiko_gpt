# from aiogram import types, Router, F
# from typing import List
# import re
# import requests
# import config
# import json
# from datetime import datetime
# from main import bot
# from database import Database

# import logging

# # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')


# db = Database('db.db')

# mimiko_ai_api_router = Router()
# '''    google/gemini-2.0-flash-001'''
# async def query_deepseek_api(user_id: int, user_query: str, model="deepseek/deepseek-chat-v3-0324", temperature: float=0.6) -> str:
#     url = config.API_ENDPOINT
#     headers = {"Authorization": f"Bearer {config.AI_TOKEN}",
#                 "Content-Type": "application/json"}

#     # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞(—Å–ø–∏—Å–æ–∫)
#     context_data = db.get_user_context(user_id)
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#     context_data.append({"role": "user", "content": user_query})
    
#     payload = {"model": model, "messages": context_data, "temperature": temperature}

#     try:
#         logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {url}, payload: {payload}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

#         response = requests.post(url, json=payload, headers=headers)
#         response.raise_for_status()
#         response_data = response.json()

#         if response_data.get("choices"):

#             logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: {response_data}")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ

#             mimiko_reply = response_data["choices"][0]["message"]["content"].strip()

#             # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–∏–º–∏–∫–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
#             context_data.append({"role": "mimiko", "content": mimiko_reply})
#             db.save_context(user_id, json.dumps(context_data, ensure_ascii=False), datetime.now().strftime("%Y-%m-%d %H:%M:%S"))
#             return mimiko_reply
        
#         raise Exception("No response content found in API response")

#     except Exception as e:
#         print(f"üö´ –û—à–∏–±–∫–∞ API: {str(e)}")
#         return '–û—à–∏–±–∫–∞ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
# def save_user_context(user_id: int, context_data: list):
#     """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
#     context_json = json.dumps(context_data, ensure_ascii=False, indent=None)
#     timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

#     db.save_context(user_id, context_json, timestamp) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

from typing import List

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def split_text(text: str, max_length: int = 4096) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ."""
    words = text.split()
    chunks = []
    current_chunk = []
    
    for word in words:
        test_chunk = " ".join(current_chunk + [word])
        if len(test_chunk) <= max_length:
            current_chunk.append(word)
        else:
            chunks.append(" ".join(current_chunk))
            current_chunk = [word]
    
    if current_chunk:
        chunks.append(" ".join(current_chunk))
    
    return chunks




def extract_code_blocks(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞, –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ ```, –∏–∑ —Ç–µ–∫—Å—Ç–∞.

    Args:
      text: –¢–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞.

    Returns:
      –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –±–ª–æ–∫–∏ –∫–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫,
      –µ—Å–ª–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
    """
    code_blocks = []
    pattern = r"```(.*?)```"
    matches = re.findall(pattern, text, re.DOTALL)

    for match in matches:
        code_blocks.append(match.strip())

    return code_blocks




def extract_code_handler(text):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extract_code.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """

    code_blocks = extract_code_blocks(text)

    if code_blocks:
        for i, block in enumerate(code_blocks):
            # –í–∞–∂–Ω–æ: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
            escaped_block = block.replace('\\', '\\\\').replace('`', '\\`').replace('*', '\\*').replace('_', '\\_').replace('{', '\\{').replace('}', '\\}').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('#', '\\#').replace('+', '\\-').replace('.', '\\.').replace('!', '\\!')
            try:
                return f"–ë–ª–æ–∫ –∫–æ–¥–∞ {i+1}:\n```\n{escaped_block}\n```"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)."
    else:
        return "–ë–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."






def fix_code_blocks(text: str) -> str:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–ª—è Telegram."""
    # –ò—â–µ–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
    pattern = r'```([\s\S]*?)```'
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∏ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    return re.sub(pattern, lambda m: replace_code_block(m.group(0)), text)

def replace_code_block(code_block: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫."""
    text = code_block
    # –ï—Å–ª–∏ –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
    while len(text) > 4096:
        split_index = 4096 - 5  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = text[:split_index] + '\n' + '\n```' + text[split_index:]
    return text

#  –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
def escape_telegram_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram."""
    special_chars = ['_', '>', '#', '=', '[', ']', '(', ')', '~', '+', '-', '.', '!', '*']
    text = text.replace('###', '')
    text = text.replace('#', '')
    text = text.replace('**', '')
    text = text.replace('---', '')
    return ''.join(f'\\{char}' if char in special_chars else char for char in text)


# # –õ–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# @mimiko_ai_api_router.message(F.text)
# async def handle_text(message: types.Message):
#     user_input = message.text
#     user_id = message.from_user.id
#     username = message.from_user.username or str(user_id)

#     # –î–æ–±–∞–≤–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –æ–Ω –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start
#     db.add_user(user_id, username)
    
#     try:
#         # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
#         await bot.send_chat_action(message.chat.id, 'typing')
#         response = await query_deepseek_api(user_id, user_input)

#         # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
#         db.user_input_data(user_id, len(user_input.split()))
#         db.response_data(user_id, len(response.split()))   
        
#         await bot.send_chat_action(message.chat.id, 'typing')

#         # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
#         try:
#             response = escape_telegram_markdown(response)                        

#             if len(response) <= 4096:
#                 await bot.send_chat_action(message.chat.id, 'typing')
#                 await message.answer(response, parse_mode="MarkdownV2")
#             else:
#                 response = fix_code_blocks(response)
#                 response = replace_code_block(response)
#                 chunks = split_text(response)
#                 print(chunks)
#                 for chunk in chunks:
#                     await bot.send_chat_action(message.chat.id, 'typing')
#                     await message.answer(chunk, parse_mode="MarkdownV2")

#         except Exception as e:
#             print(f"–û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
#             # –ï—Å–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
#             if len(response) <= 4096:
#                 await message.answer(response, parse_mode=None)
#             else:
#                 chunks = split_text(response)
#                 for chunk in chunks:
#                     await message.answer(chunk, parse_mode=None)
                
#     except Exception as e:
#         logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

#         error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
#         await message.answer(error_msg)






from aiogram import types, Router, F, Bot
from aiogram.utils.chat_action import ChatActionSender # –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ "–ø–µ—á–∞—Ç–∞–µ—Ç"
from typing import List
import re
import requests
import config
from datetime import datetime
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database import Database
import logging
from main import bot 

db = Database('db.db')
mimiko_ai_api_router = Router()


async def query_deepseek_api(user_id: int, user_query: str, model: str = "deepseek/deepseek-r1-0528-qwen3-8b", temperature: float = 0.6) -> str:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API DeepSeek —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –±—É–¥–µ—Ç –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ –ë–î –ø—Ä–∏ –≤—ã–∑–æ–≤–µ db.get_user_context().
    """
    url = config.API_ENDPOINT
    headers = {"Authorization": f"Bearer {config.AI_TOKEN}",
               "Content-Type": "application/json"}

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    # –§—É–Ω–∫—Ü–∏—è get_user_context —É–∂–µ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å list —Å–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.
    messages_context = db.get_user_context(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
    messages_context.append({"role": "user", "content": user_query})
    
    payload = {"model": model, "messages": messages_context, "temperature": temperature}

    try:
        logging.info(f"User {user_id}: Sending request to API. Model: {model}, Temp: {temperature}, Context len: {len(messages_context)}")

        response = requests.post(url, json=payload, headers=headers)
        response_data = response.json()

        if response_data.get("choices"):
            mimiko_reply = response_data["choices"][0]["message"]["content"].strip()

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç + –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + –æ—Ç–≤–µ—Ç AI
            # `messages_context` –ü–ï–†–ï–î —ç—Ç–∏–º —à–∞–≥–æ–º —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            # –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç AI –∫ —ç—Ç–æ–º—É –∂–µ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º.
            messages_context.append({"role": "assistant", "content": mimiko_reply})
            db.save_context(user_id, messages_context) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞
            db.user_input_data(user_id, len(user_query.split()))
            db.response_data(user_id, len(mimiko_reply.split()))

            return mimiko_reply
        
        logging.error(f"User {user_id}: API response did not contain choices.")
        # –ï—Å–ª–∏ –Ω–µ—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ —Ç–µ—Ä—è–ª—Å—è
        db.save_context(user_id, messages_context) 
        raise Exception("No response content found in API response")

    except requests.exceptions.RequestException as e:
        logging.error(f"User {user_id}: HTTP Error during API request: {e}")
        return '–û—à–∏–±–∫–∞ API: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    except Exception as e:
        logging.exception(f"User {user_id}: An unexpected error occurred during API call: {e}")
        return f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. {str(e)}'


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥ ---
@mimiko_ai_api_router.message(F.text)
async def handle_text(message: types.Message):
    user_input = message.text
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = db.get_user_info(user_id) 
    if not user_info:
        logging.error(f"User {user_id} not found in DB for handle_text. Attempting add_user again.")
        db.add_user(user_id, username)
        user_info = db.get_user_info(user_id)
        if not user_info: # –ï—Å–ª–∏ –∏ –ø–æ—Å–ª–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start.")
            return
            
    # C—Ç—Ä—É–∫—Ç—É—Ä–∞ user_info: user_id, username, join_date, current_profile_key
    # –ò–Ω–¥–µ–∫—Å 3 - —ç—Ç–æ current_profile_key
    current_profile_key = user_info[3] if len(user_info) > 3 and user_info[3] else config.DEFAULT_PROFILE_KEY
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    profile_settings = config.PROFILES.get(current_profile_key, config.PROFILES[config.DEFAULT_PROFILE_KEY])
    profile_display_name = profile_settings["name"]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ "–ø–µ—á–∞—Ç–∞–µ—Ç" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –û–Ω–∞ —Å–∞–º–∞ –≤–æ–∑—å–º–µ—Ç –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–î.
            response = await query_deepseek_api(user_id, user_input)

        print(current_profile_key)
        print(type(current_profile_key))

        # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ---
        # –≠—Ç–æ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä–∞–∑–±–∏–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏.
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ split_text, escape_telegram_markdown, fix_code_blocks –¥–æ—Å—Ç—É–ø–Ω—ã.
        # –ï—Å–ª–∏ –æ–Ω–∏ –≤ mimiko_ai_api.py, –º–æ–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Ö –∫–∞–∫ mimiko_ai_api.split_text(...)
        # –ò–ª–∏ –ª—É—á—à–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.
        
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –æ–Ω–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç `mimiko_ai_api`
        # –µ—Å–ª–∏ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ —Ç–æ–º –∂–µ —Ñ–∞–π–ª–µ –∏ –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —è–≤–Ω–æ.
        # –õ—É—á—à–µ –≤—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ handlers.py –∏ mimiko_ai_api.py.
        # –ó–¥–µ—Å—å –º—ã –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤ mimiko_ai_api.py –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ `mimiko_ai_api` –∏–º–ø–æ—Ä—Ç.

        #
        #
        #
        #
        #

        if current_profile_key == 'mimiko_junior':
            try:
                processed_response = escape_telegram_markdown(response)

                if len(processed_response) > 4093:
                    processed_response = fix_code_blocks(processed_response)
                    
                    chunks = split_text(processed_response) # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ split_text()
                    
                    for chunk in chunks:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–∞—Ä—Å-–º–æ–¥–æ–º
                        await message.answer(
                            f"{profile_display_name}:\n{chunk}",
                            parse_mode="MarkdownV2"
                        )
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"{profile_display_name}:\n{processed_response}", 
                        parse_mode="MarkdownV2"
                    )
            except Exception as e:
                logging.exception(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å MarkdownV2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                await message.answer(f"{profile_display_name}:\n{response}", parse_mode=None)
        
        elif current_profile_key == 'mimiko_middle':
            # f"{profile_display_name}:\n{response}"
            try:
                if len(response) > 4093:
                    chunks = split_text(response) # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ split_text()
                    for chunk in chunks:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–∞—Ä—Å-–º–æ–¥–æ–º
                        await message.answer(
                            f"{profile_display_name}:\n{chunk}",
                            parse_mode="MarkdownV2"
                        )
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"{profile_display_name}:\n{response}", 
                        parse_mode="MarkdownV2"
                    )
            except Exception as e:
                logging.exception(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å MarkdownV2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                await message.answer(f"{profile_display_name}:\n{response}", parse_mode=None)

        elif current_profile_key == 'mimiko_senior':
            try:
                if len(response) > 4093:
                    chunks = split_text(response) # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ split_text()
                    for chunk in chunks:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–∞—Ä—Å-–º–æ–¥–æ–º
                        await message.answer(
                            f"{profile_display_name}:\n{chunk}",
                            parse_mode="MarkdownV2"
                        )
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"{profile_display_name}:\n{response}", 
                        parse_mode="MarkdownV2"
                    )
            except Exception as e:
                logging.exception(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å MarkdownV2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                await message.answer(f"{profile_display_name}:\n{response}", parse_mode=None)

        elif current_profile_key == 'story_teller':
            try:
                if len(response) > 4093:
                    chunks = split_text(response) # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ split_text()
                    for chunk in chunks:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–∞—Ä—Å-–º–æ–¥–æ–º
                        await message.answer(
                            f"{profile_display_name}:\n{chunk}",
                            parse_mode="MarkdownV2"
                        )
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"{profile_display_name}:\n{response}", 
                        parse_mode="MarkdownV2"
                    )
            except Exception as e:
                logging.exception(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å MarkdownV2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                await message.answer(f"{profile_display_name}:\n{response}", parse_mode=None)

        elif current_profile_key == 'mimiko_chat':
            try:
                if len(response) > 4093:
                    chunks = split_text(response) # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ split_text()
                    for chunk in chunks:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–∞—Ä—Å-–º–æ–¥–æ–º
                        await message.answer(
                            f"{profile_display_name}:\n{chunk}",
                            parse_mode="MarkdownV2"
                        )
                else:
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await message.answer(
                        f"{profile_display_name}:\n{response}", 
                        parse_mode="MarkdownV2"
                    )
            except Exception as e:
                logging.exception(f"User {user_id}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
                # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å MarkdownV2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
                await message.answer(f"{profile_display_name}:\n{response}", parse_mode=None)

    except Exception as e:
        logging.exception(f"User {user_id}: –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        await message.answer(error_msg)

