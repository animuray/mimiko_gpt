from aiogram import types, Router, F
from typing import List
import re
import requests
import config
import json
from datetime import datetime
from main import bot
from database import Database

db = Database('db.db')

mimiko_ai_api_router = Router()
print(mimiko_ai_api_router)
async def query_deepseek_api(user_id: int, user_query: str, model="google/gemini-2.0-flash-001", temperature: float=0.6) -> str:
    url = config.API_ENDPOINT
    headers = {"Authorization": f"Bearer {config.AI_TOKEN}",
                "Content-Type": "application/json"}

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞(—Å–ø–∏—Å–æ–∫)
    context_data = db.get_user_context(user_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    context_data.append({"role": "user", "content": user_query})
    
    payload = {"model": model, "messages": context_data, "temperature": temperature}

    try:
        response = requests.post(url, json=payload, headers=headers)
        response.raise_for_status()
        response_data = response.json()

        if response_data.get("choices"):
            mimiko_reply = response_data["choices"][0]["message"]["content"].strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –º–∏–º–∏–∫–æ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            context_data.append({"role": "mimiko", "content": mimiko_reply})
            db.save_context(user_id, json.dumps(context_data, ensure_ascii=False), datetime.now().strftime("%d-%m-%Y %H:%M:%S"))
            return mimiko_reply
        
        raise Exception("No response content found in API response")

    except Exception as e:
        print(f"üö´ –û—à–∏–±–∫–∞ API: {str(e)}")
        return '–û—à–∏–±–∫–∞ API. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ –≤—Ä–µ–º–µ–Ω–∏
def save_user_context(user_id: int, context_data: list):
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
    context_json = json.dumps(context_data, ensure_ascii=False, indent=None)
    timestamp = datetime.now().strftime("%d-%m-%Y %H:%M:%S")

    db.save_context(user_id, context_json, timestamp) # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∏–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
def split_text(text: str, max_length: int = 4096) -> List[str]:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ."""
    words = text.split()
    chunks = []
    current_chunk = []
    
    for word in words:
        test_chunk = " ".join(current_chunk + [word])
        if len(test_chunk) <= max_length:
            current_chunk.append(word)
        else:
            chunks.append(" ".join(current_chunk))
            current_chunk = [word]
    
    if current_chunk:
        chunks.append(" ".join(current_chunk))
    
    return chunks




def extract_code_blocks(text):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞, –∑–∞–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ ```, –∏–∑ —Ç–µ–∫—Å—Ç–∞.

    Args:
      text: –¢–µ–∫—Å—Ç, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–π—Ç–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞.

    Returns:
      –°–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏—Ö –±–ª–æ–∫–∏ –∫–æ–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫,
      –µ—Å–ª–∏ –±–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.
    """
    code_blocks = []
    pattern = r"```(.*?)```"
    matches = re.findall(pattern, text, re.DOTALL)

    for match in matches:
        code_blocks.append(match.strip())

    return code_blocks




def extract_code_handler(text):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /extract_code.
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –±–ª–æ–∫–∏ –∫–æ–¥–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """

    code_blocks = extract_code_blocks(text)

    if code_blocks:
        for i, block in enumerate(code_blocks):
            # –í–∞–∂–Ω–æ: —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2
            escaped_block = block.replace('\\', '\\\\').replace('`', '\\`').replace('*', '\\*').replace('_', '\\_').replace('{', '\\{').replace('}', '\\}').replace('[', '\\[').replace(']', '\\]').replace('(', '\\(').replace(')', '\\)').replace('#', '\\#').replace('+', '\\-').replace('.', '\\.').replace('!', '\\!')
            try:
                return f"–ë–ª–æ–∫ –∫–æ–¥–∞ {i+1}:\n```\n{escaped_block}\n```"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–ª–æ–∫–∞ –∫–æ–¥–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)."
    else:
        return "–ë–ª–æ–∫–∏ –∫–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."






def fix_code_blocks(text: str) -> str:
    """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –¥–ª—è Telegram."""
    # –ò—â–µ–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
    pattern = r'```([\s\S]*?)```'
    # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–ª–∏ 4096 —Å–∏–º–≤–æ–ª–æ–≤
    return re.sub(pattern, lambda m: replace_code_block(m.group(0)), text)

def replace_code_block(code_block: str) -> str:
    """–ó–∞–º–µ–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫."""
    text = code_block
    # –ï—Å–ª–∏ –∫–æ–¥–æ–≤—ã–π –±–ª–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π, —Ä–∞–∑–±–∏–≤–∞–µ–º –µ–≥–æ
    while len(text) > 4096:
        split_index = 4096 - 1  # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = text[:split_index] + '\n' + '\n```' + text[split_index:]
    return text

#  –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram
def escape_telegram_markdown(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram."""
    special_chars = ['_', '>', '#', '=', '[', ']', '(', ')', '~', '+', '-', '.', '!', '*']
    text = text.replace('###', '')
    text = text.replace('#', '')
    text = text.replace('**', '')
    return ''.join(f'\\{char}' if char in special_chars else char for char in text)


# –õ–æ–≤–∏–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@mimiko_ai_api_router.message(F.text)
async def handle_text(message: types.Message):
    user_input = message.text
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)

    # –î–æ–±–∞–≤–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏ –æ–Ω –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∫–æ–º–∞–Ω–¥—É /start
    db.add_user(user_id, username)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await bot.send_chat_action(message.chat.id, 'typing')
        response = await query_deepseek_api(user_id, user_input)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        db.user_input_data(user_id, len(user_input.split()))
        db.response_data(user_id, len(response.split()))   
        
        await bot.send_chat_action(message.chat.id, 'typing')

        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è MarkdownV2
        try:
            response = escape_telegram_markdown(response)                        

            if len(response) <= 4096:
                await bot.send_chat_action(message.chat.id, 'typing')
                await message.answer(response, parse_mode="MarkdownV2")
            else:
                response = fix_code_blocks(response)
                response = replace_code_block(response)
                chunks = split_text(response)
                print(f'\n\n\n{chunks}')
                for chunk in chunks:
                    await bot.send_chat_action(message.chat.id, 'typing')
                    await message.answer(chunk, parse_mode="MarkdownV2")

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")
            # –ï—Å–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
            if len(response) <= 4096:
                await message.answer(response, parse_mode=None)
            else:
                chunks = split_text(response)
                for chunk in chunks:
                    await message.answer(chunk, parse_mode=None)
                
    except Exception as e:
        error_msg = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
        await message.answer(error_msg)



