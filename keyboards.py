# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
# from aiogram import Router, F
# from main import bot
# from aiogram.types import BufferedInputFile 

# from io import BytesIO

# keyboard_router = Router()


# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –∫–Ω–æ–ø–æ–∫
# button_1 = KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åüì±')
# button_2 = KeyboardButton(text='–ß—Ç–æ-—Ç–æ —Ç—É—Ç')

# # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –¥–æ–±–∞–≤–ª—è—è –≤ –Ω–µ–≥–æ –∫–Ω–æ–ø–∫–∏
# keyboard = ReplyKeyboardMarkup(keyboard=[[button_1, button_2]], resize_keyboard=True)


# @keyboard_router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüì±')
# async def user_profile(message: Message):
#     user_data = db.get_user_info(message.from_user.id)
#     profile = f'üåü<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{user_data[1]}\nüÜî<b>–í–∞—à ID:</b> {user_data[0]}\n\nüî•<b>–î–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏: {user_data[3]}</b>\n\nüóì<b>–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è:</b> {datetime.fromisoformat(user_data[2]).strftime("%d.%m.%Y")}'
    
#     await message.answer_photo(photo=photo_links.profile_photo2, caption=profile, parse_mode='HTML')
    # pass


# # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# def get_keyboard() -> InlineKeyboardMarkup:
#     builder = InlineKeyboardBuilder()
#     builder.add(
#         InlineKeyboardButton(text="1 –º–µ—Å—è—Ü", callback_data="tariff1"),
#         InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞", callback_data="tariff2"),
#         InlineKeyboardButton(text="6 –º–µ—Å—è—Ü–µ–≤", callback_data="tariff3"),
#         InlineKeyboardButton(text="12 –º–µ—Å—è—Ü–µ–≤", callback_data="tariff4"),
#     )
#     builder.adjust(2)
#     return builder.as_markup()


# @keyboard_router.message(F.text == '–¢–∞—Ä–∏—Ñ—ã üì¶')
# async def cmd_start(message: Message):
#     await message.answer(
#         "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤:",
#         reply_markup=get_keyboard()
#     )

# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
# @keyboard_router.callback_query(lambda c: c.data == "tariff1")
# async def process_info(callback: CallbackQuery):
#     await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n/buy_for_1_month')
#     await callback.answer()













# keyboards.py
from aiogram import types, Router, F, Bot # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Bot –¥–ª—è —Ç–∏–ø–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup # –ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–æ–≤ Telegram
import config # –ò–º–ø–æ—Ä—Ç config –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ PROFILES
import logging
import pic_links

keyboard_router = Router()

# --- –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è Reply Keyboard ---
button_1 = types.KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åüì±')
button_2 = types.KeyboardButton(text='‚ùì –ü–æ–º–æ—â—å')
keyboard = types.ReplyKeyboardMarkup(
    keyboard=[[button_1, button_2]], 
    resize_keyboard=True,
    one_time_keyboard=False
)

# --- –ù–û–í–ê–Ø –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Inline Keyboard –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Ñ–∏–ª—è ---
def get_profile_keyboard() -> InlineKeyboardMarkup:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
    """
    builder = InlineKeyboardBuilder()
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ñ–∏–ª—è–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    for profile_key, profile_data in config.PROFILES.items():
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è. Callback data —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∏ –∫–ª—é—á –ø—Ä–æ—Ñ–∏–ª—è.
        builder.add(types.InlineKeyboardButton(
            text=profile_data["name"], # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
            callback_data=f"select_profile:{profile_key}" # –§–æ—Ä–º–∞—Ç: "–ø—Ä–µ—Ñ–∏–∫—Å:–∫–ª—é—á_–ø—Ä–æ—Ñ–∏–ª—è"
        ))
    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤ 1 —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    builder.adjust(2) 
    return builder.as_markup()

# --- –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
@keyboard_router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åüì±')
async def user_profile(message: Message):
    # –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å db –∏ bot, –∏—Ö –Ω—É–∂–Ω–æ –ª–∏–±–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–¥–µ—Å—å, –ª–∏–±–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å (–µ—Å–ª–∏ –æ–Ω–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ)
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ db –∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∏–º–ø–æ—Ä—Ç—ã –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    try:
        from database import Database
        db = Database('db.db') # –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä db, –µ—Å–ª–∏ –æ–Ω —Å–æ–∑–¥–∞–µ—Ç—Å—è –∏–Ω–∞—á–µ
        
        user_id = message.from_user.id
        user_data = db.get_user_info(user_id) # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        
        if user_data:
            # user_data —Å–æ–¥–µ—Ä–∂–∏—Ç: user_id, username, join_date, current_profile_key
            profile_key = user_data[3] if len(user_data) > 3 and user_data[3] else config.DEFAULT_PROFILE_KEY
            profile_name = config.PROFILES.get(profile_key, config.PROFILES[config.DEFAULT_PROFILE_KEY])['name']
            
            user_info_text = (
                f"üåü <b>–í–∞—à –ü—Ä–æ—Ñ–∏–ª—å</b>\n"
                f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_data[1]}\n"
                f"–í–∞—à ID: {user_data[0]}\n"
                f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data[2]}\n" # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</b> {profile_name}"
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ, –ø–æ–∫–∞–∑—ã–≤–∞—è –æ—Å–Ω–æ–≤–Ω—É—é Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer_photo(photo=pic_links.fons['bg_start'], caption=user_info_text, parse_mode='HTML', reply_markup=keyboard)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ.", reply_markup=keyboard)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∫–æ–º–∞–Ω–¥—ã –ü—Ä–æ—Ñ–∏–ª—åüì±: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.", reply_markup=keyboard)
